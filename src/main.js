import { GameRenderer } from './core/GameRenderer.js';
import { GameLoop } from './core/GameLoop.js';
import { UI } from './ui/UI.js';
import { Assets } from './services/Assets.js';
import { Bird } from './entities/Bird.js';
import { Pipes } from './entities/Pipes.js';
import { Collision } from './core/Collision.js';
import { Ground } from './entities/Ground.js';
import { Background } from './entities/Background.js';
import { Leaderboard } from './services/Leaderboard.js';
import { Bonus } from './entities/Bonus.js';
import { AntiBonus } from './entities/AntiBonus.js';
import { TelegramUser } from './services/TelegramUser.js';
import { ProfileIntegration } from './services/ProfileIntegration.js';

// –ü—Ä–æ—Å—Ç–µ–π—à–∏–π gameState-–∑–∞–≥–ª—É—à–∫–∞
const gameState = {
  _state: 'start',
  _gameOverProcessed: false, // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ Game Over
  setState(state) { this._state = state; },
  isPlaying() { return this._state === 'playing'; },
  isGameOver() { return this._state === 'gameOver'; },
  isStart() { return this._state === 'start'; },
};

const canvas = document.getElementById('game-canvas');
const ctx = canvas.getContext('2d');



const renderer = new GameRenderer(canvas, ctx, {});
const ui = new UI();
const assets = new Assets();
const leaderboard = new Leaderboard();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º Telegram
const telegramUser = new TelegramUser();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ—Ñ–∏–ª–µ–π
const profileIntegration = new ProfileIntegration();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –∏ –ø—Ä–æ—Ñ–∏–ª—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
async function initializeGameData() {
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥
    await leaderboard.load();
    console.log('‚úÖ Leaderboard –∑–∞–≥—Ä—É–∂–µ–Ω');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const profileInitialized = await profileIntegration.initializeProfile();
    if (profileInitialized) {
      console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } else {
      console.warn('‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    }
    
    // –ü–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
    return true;
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', e);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ canvas
function resizeCanvas() {
    const isMobile = window.innerWidth <= 500;
    
    if (isMobile) {
      // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    } else {
      // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
      canvas.width = 800;
      canvas.height = 600;
    }
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º renderer –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
    if (renderer) {
      renderer.resize(canvas.width, canvas.height);
    }
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä canvas
  resizeCanvas();
  
  // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
  window.addEventListener('resize', resizeCanvas);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–ª–∏–∫–µ
  let audioContextStarted = false;
  function startAudioContext() {
    if (!audioContextStarted && assets._audioCtx && assets._audioCtx.state === 'suspended') {
      assets._audioCtx.resume();
      audioContextStarted = true;
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—É–¥–∏–æ
  canvas.addEventListener('click', startAudioContext);
  canvas.addEventListener('touchstart', startAudioContext);

assets.loadAll().then(() => {
  // –°–æ–∑–¥–∞—ë–º —Ä–µ–∞–ª—å–Ω—É—é –ø—Ç–∏—á–∫—É
  const bird = new Bird(canvas.width, canvas.height);
  bird.setSprite(assets.getBirdSkinImage()); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —Å–∫–∏–Ω
  bird.onJumpSound = () => assets.getSound('jump')();

  // –°–æ–∑–¥–∞—ë–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç—Ä—É–±—ã
  const pipes = new Pipes(canvas.width, canvas.height);
  pipes.setSprite(assets.getImage('pipe'));

  // –°–æ–∑–¥–∞—ë–º –º–æ–¥—É–ª—å —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
  const collision = new Collision(canvas.height);

  // –°–æ–∑–¥–∞—ë–º –∑–µ–º–ª—é
  const ground = new Ground(canvas.width, canvas.height);

  // –°–æ–∑–¥–∞—ë–º —Ñ–æ–Ω
  const background = new Background(canvas.width, canvas.height);

  // –°–æ–∑–¥–∞—ë–º –±–æ–Ω—É—Å—ã
  const bonus = new Bonus(canvas.width, canvas.height);
  bonus.setPipes(pipes); // –ü–µ—Ä–µ–¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä—É–±—ã

  // –°–æ–∑–¥–∞—ë–º –∞–Ω—Ç–∏–±–æ–Ω—É—Å—ã
  const antiBonus = new AntiBonus(canvas.width, canvas.height);
  antiBonus.setPipes(pipes); // –ü–µ—Ä–µ–¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä—É–±—ã

  // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥—É–ª–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
  const modules = {
    bird: bird,
    pipes: pipes,
    collision: collision,
    background: background,
    ground: ground,
    leaderboard: leaderboard,
    bonus: bonus,
    antiBonus: antiBonus,
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º renderer —Å –Ω–æ–≤—ã–º–∏ –º–æ–¥—É–ª—è–º–∏
  renderer.bird = bird;
  renderer.pipes = pipes;
  renderer.ground = ground;
  renderer.background = background;
  renderer.bonus = bonus;
  renderer.antiBonus = antiBonus;

  const gameLoop = new GameLoop(modules, gameState, () => {
    renderer.render();
    if (gameState.isPlaying()) {
      const score = gameLoop.getScore();
      ui.showScore(score);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
      const currentProfile = profileIntegration.getCurrentProfile();
      if (currentProfile) {
        const totalEarned = currentProfile.coins.totalEarned;
        ui.updateTokenDisplay(totalEarned);
      }
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –∑–≤—É–∫ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
  gameLoop.onHitSound = () => assets.getSound('hit')();
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–≤—É–∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–∞
  gameLoop.onScoreSound = () => assets.getSound('score')();

  // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –≤–≤–æ–¥ –∏–∑ renderer –≤ gameLoop
  renderer.bindInputHandlers(type => {
    gameLoop.handleInput(type);
  });

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ UI –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏–≥—Ä—ã
  function updateUIByState() {
    if (gameState.isStart()) {
      showStartScreen();
    } else if (gameState.isGameOver()) {
      showGameOverScreen();
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–æ–≤
  async function handleWithdrawTokens() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö
      const currentProfile = profileIntegration.getCurrentProfile();
      const totalTokens = currentProfile ? currentProfile.coins.totalEarned : 0;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—ã–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–æ–≤ (–¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–≥–¥–∞)
      ui.showWithdrawScreen(
        () => {
          // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
          updateUIByState();
        },
        async (walletAddress, tokensAmount) => {
          // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–≤–æ–¥"
          await processWithdrawTokens(walletAddress, tokensAmount);
        },
        totalTokens
      );
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–æ–≤
  async function processWithdrawTokens(walletAddress, tokensAmount) {
    try {
      console.log('üí∞ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤:', {
        walletAddress,
        tokensAmount
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const response = await fetch(`https://flappy-send-token-production.up.railway.app/send_tokens?wallet=${encodeURIComponent(walletAddress)}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          amount: tokensAmount
        })
      });
      
      if (!response.ok) {
        const errorData = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', response.status, errorData);
        alert(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}\n${errorData}`);
        return;
      }
      
      const result = await response.json();
      console.log('‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:', result);
      
      // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ Firebase –Ω–∞ 1
      await decreaseUserTokens(1);
      
      alert('‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫!');
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫—Ä–∞–Ω
      updateUIByState();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firebase
  async function decreaseUserTokens(amount) {
    try {
      const currentProfile = profileIntegration.getCurrentProfile();
      if (!currentProfile) {
        console.error('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      
      const userId = telegramUser.getUserId();
      if (!userId) {
        console.error('‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      
      const newTotalEarned = Math.max(0, currentProfile.coins.totalEarned - amount);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ Firebase
      const updatedProfile = {
        ...currentProfile,
        coins: {
          ...currentProfile.coins,
          totalEarned: newTotalEarned
        }
      };
      
      const success = await profileIntegration.profileManager.updateProfile(userId, updatedProfile);
      
      if (success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        profileIntegration.currentProfile = updatedProfile;
        console.log('‚úÖ –¢–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ Firebase:', newTotalEarned);
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ Firebase');
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤ Firebase:', error);
      throw error;
    }
  }

  // –°–ª–µ–¥–∏–º –∑–∞ —Å–º–µ–Ω–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º gameState –±—É–¥–µ—Ç —Å–æ–±—ã—Ç–∏–µ)
  const origSetState = gameState.setState.bind(gameState);
  gameState.setState = function(state) {
    origSetState(state);
    updateUIByState();
  };

  function showStartScreen() {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞—Ö
    const currentProfile = profileIntegration.getCurrentProfile();
    const totalEarned = currentProfile ? currentProfile.coins.totalEarned : 0;
    
    
    ui.showStart(
      () => {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        profileIntegration.resetGameFlags();
        gameState._gameOverProcessed = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Game Over
        gameLoop.reset();
        gameLoop.start();
        ui.showScore(0);
      },
      () => {
        ui.showLeaderboard(() => {
          updateUIByState();
        });
        ui.updateLeaderboardList(leaderboard.getTopScores(), leaderboard.isOnline);
      },
      () => {
        ui.showSkins(() => {
          updateUIByState();
        }, (skinIndex) => {
          const skins = assets.getAvailableBirdSkins();
          const selectedSkin = skins[skinIndex];
          if (assets.setBirdSkin(selectedSkin)) {
            bird.setSprite(assets.getBirdSkinImage());
          }
        }, assets.getCurrentBirdSkin());
      },
      () => {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∑–≤—É–∫
        const isSoundOn = assets.toggleSound();
        ui.updateSoundButton(isSoundOn);
      },
      () => {
        // –í—ã–≤–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤
        handleWithdrawTokens();
      },
      telegramUser,
      totalEarned
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∑–≤—É–∫–∞ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —ç–∫—Ä–∞–Ω–∞
    ui.updateSoundButton(assets.isSoundOn());
  }

  async function showGameOverScreen() {
    const score = gameLoop.getScore();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—á—ë—Ç –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
    await leaderboard.addScore(score, telegramUser);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–≥—Ä—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –ø–æ–∫–∞–∑—ã–≤–∞–Ω–∏–µ Game Over)
    if (score > 0 && !gameState._gameOverProcessed) {
      const coinsEarned = Math.floor(score / 5); // 1 –º–æ–Ω–µ—Ç–∞ –∑–∞ –∫–∞–∂–¥—ã–µ 5 –æ—á–∫–æ–≤
      await profileIntegration.updateProfileAfterGame(score, coinsEarned);
      await profileIntegration.checkAchievements(score);
      
      // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ Game Over —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
      gameState._gameOverProcessed = true;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const currentProfile = profileIntegration.getCurrentProfile();
    const gameTokensEarned = score > 0 ? Math.floor(score / 5) : 0;
    const totalTokensEarned = currentProfile ? currentProfile.coins.totalEarned : 0;
    
    ui.showGameOver(
      score,
      () => {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        profileIntegration.resetGameFlags();
        gameState._gameOverProcessed = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Game Over
        gameLoop.reset();
        gameLoop.start();
        ui.showScore(0);
      },
      () => {
        ui.showLeaderboard(() => {
          updateUIByState();
        });
        ui.updateLeaderboardList(leaderboard.getTopScores(), leaderboard.isOnline);
      },
      () => {
        ui.showSkins(() => {
          updateUIByState();
        }, (skinIndex) => {
          const skins = assets.getAvailableBirdSkins();
          const selectedSkin = skins[skinIndex];
          if (assets.setBirdSkin(selectedSkin)) {
            bird.setSprite(assets.getBirdSkinImage());
          }
        }, assets.getCurrentBirdSkin());
      },
      () => {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∑–≤—É–∫
        const isSoundOn = assets.toggleSound();
        ui.updateSoundButton(isSoundOn);
      },
      () => {
        // –í—ã–≤–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤
        handleWithdrawTokens();
      },
      gameTokensEarned,
      totalTokensEarned
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ—Å–ª–µ –∏–≥—Ä—ã
    const updatedProfile = profileIntegration.getCurrentProfile();
    if (updatedProfile) {
      ui.updateTokenDisplay(updatedProfile.coins.totalEarned);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∑–≤—É–∫–∞ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —ç–∫—Ä–∞–Ω–∞
    ui.updateSoundButton(assets.isSoundOn());
  }

  // –†–µ–Ω–¥–µ—Ä–∏–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–∞–¥—Ä
  renderer.render();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  assets.playBackgroundMusic();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö (–≤–∫–ª—é—á–∞—è –ø—Ä–æ—Ñ–∏–ª—å) –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö –∏–≥—Ä–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
  initializeGameData().then(() => {
    // –ü–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
    updateUIByState();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∑–≤—É–∫–∞
    ui.updateSoundButton(assets.isSoundOn());
  }).catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
    updateUIByState();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∑–≤—É–∫–∞
    ui.updateSoundButton(assets.isSoundOn());
  });
}); 