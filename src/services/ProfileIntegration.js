import { UserProfileManager } from './UserProfileManager.js';
import { TelegramUser } from './TelegramUser.js';

/**
 * –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ UserProfileManager –≤ –∏–≥—Ä—É
 */
export class ProfileIntegration {
  constructor() {
    this.profileManager = new UserProfileManager();
    this.telegramUser = new TelegramUser();
    this.currentProfile = null;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã
   */
  async initializeProfile() {
    
    try {
      // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
      this.currentProfile = await this.profileManager.ensureProfileExists(this.telegramUser);
      
      if (this.currentProfile) {
        console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', {
          username: this.currentProfile.profile.username,
          coins: this.currentProfile.coins.balance,
          gamesPlayed: this.currentProfile.profile.totalGamesPlayed
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ñ–∏–ª–µ
        this.updateProfileUI();
        
        
        return true;
      } else {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å');
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      return false;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç UI —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ñ–∏–ª–µ
   */
  updateProfileUI() {
    if (!this.currentProfile) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º totalEarned –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞)
    const tokenElement = document.getElementById('token-display');
    if (tokenElement) {
      tokenElement.textContent = `${this.currentProfile.coins.totalEarned} ü™ô`;
      console.log('üí∞ ProfileIntegration –æ–±–Ω–æ–≤–∏–ª —Ç–æ–∫–µ–Ω—ã:', this.currentProfile.coins.totalEarned);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const usernameElement = document.getElementById('username-display');
    if (usernameElement) {
      usernameElement.textContent = this.currentProfile.profile.username;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const statsElement = document.getElementById('stats-display');
    if (statsElement) {
      statsElement.innerHTML = `
        <div>–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: ${this.currentProfile.profile.totalGamesPlayed}</div>
        <div>–õ—É—á—à–∏–π —Å—á–µ—Ç: ${this.currentProfile.profile.bestScore}</div>
        <div>–ú–æ–Ω–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${this.currentProfile.coins.totalEarned}</div>
      `;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
   * @param {number} gameScore - —Å—á–µ—Ç –∏–≥—Ä—ã
   * @param {number} coinsEarned - –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
   */
  async updateProfileAfterGame(gameScore, coinsEarned) {
    if (!this.currentProfile) return;

    const userId = this.telegramUser.getUserId();
    if (!userId) return;

    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã
      const updates = {
        [`users/${userId}/profile/totalGamesPlayed`]: this.currentProfile.profile.totalGamesPlayed + 1,
        [`users/${userId}/profile/lastActive`]: Date.now(),
        [`users/${userId}/coins/balance`]: this.currentProfile.coins.balance + coinsEarned,
        [`users/${userId}/coins/totalEarned`]: this.currentProfile.coins.totalEarned + coinsEarned,
        [`users/${userId}/coins/lastUpdated`]: Date.now()
      };

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à–∏–π —Å—á–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (gameScore > this.currentProfile.profile.bestScore) {
        updates[`users/${userId}/profile/bestScore`] = gameScore;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–≥—Ä—É
      updates[`users/${userId}/gameHistory/lastGame`] = {
        score: gameScore,
        coinsEarned: coinsEarned,
        timestamp: Date.now(),
        gameId: `game_${Date.now()}`
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Firebase
      if (this.profileManager.isOnline) {
        for (const [path, value] of Object.entries(updates)) {
          const ref = window.firebaseRef(window.firebaseDB, path);
          await window.firebaseSet(ref, value);
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
      this.currentProfile.profile.totalGamesPlayed++;
      this.currentProfile.profile.lastActive = Date.now();
      this.currentProfile.coins.balance += coinsEarned;
      this.currentProfile.coins.totalEarned += coinsEarned;
      this.currentProfile.coins.lastUpdated = Date.now();

      if (gameScore > this.currentProfile.profile.bestScore) {
        this.currentProfile.profile.bestScore = gameScore;
      }

      this.currentProfile.gameHistory.lastGame = {
        score: gameScore,
        coinsEarned: coinsEarned,
        timestamp: Date.now(),
        gameId: `game_${Date.now()}`
      };

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
      this.profileManager.cacheProfile(userId, this.currentProfile);

      // –û–±–Ω–æ–≤–ª—è–µ–º UI
      this.updateProfileUI();

      console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –∏–≥—Ä—ã:', {
        score: gameScore,
        coinsEarned: coinsEarned,
        newBalance: this.currentProfile.coins.balance
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å–ª–µ –∏–≥—Ä—ã:', error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
   * @param {number} gameScore - —Å—á–µ—Ç –∏–≥—Ä—ã
   */
  async checkAchievements(gameScore) {
    if (!this.currentProfile) return;

    const userId = this.telegramUser.getUserId();
    if (!userId) return;

    const achievements = this.currentProfile.achievements;
    const unlockedAchievements = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Å—á–µ—Ç—É
    if (gameScore >= 10 && !achievements.score10.unlocked) {
      achievements.score10.unlocked = true;
      achievements.score10.timestamp = Date.now();
      unlockedAchievements.push({ name: 'score10', reward: achievements.score10.reward });
    }

    if (gameScore >= 25 && !achievements.score25.unlocked) {
      achievements.score25.unlocked = true;
      achievements.score25.timestamp = Date.now();
      unlockedAchievements.push({ name: 'score25', reward: achievements.score25.reward });
    }

    if (gameScore >= 50 && !achievements.score50.unlocked) {
      achievements.score50.unlocked = true;
      achievements.score50.timestamp = Date.now();
      unlockedAchievements.push({ name: 'score50', reward: achievements.score50.reward });
    }

    if (gameScore >= 100 && !achievements.score100.unlocked) {
      achievements.score100.unlocked = true;
      achievements.score100.timestamp = Date.now();
      unlockedAchievements.push({ name: 'score100', reward: achievements.score100.reward });
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if (unlockedAchievements.length > 0) {
      let totalReward = 0;
      
      for (const achievement of unlockedAchievements) {
        totalReward += achievement.reward;
      }

      // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
      this.currentProfile.coins.balance += totalReward;
      this.currentProfile.coins.totalEarned += totalReward;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
      if (this.profileManager.isOnline) {
        const userRef = window.firebaseRef(window.firebaseDB, `users/${userId}`);
        await window.firebaseSet(userRef, this.currentProfile);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
      this.profileManager.cacheProfile(userId, this.currentProfile);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      this.showAchievementNotification(unlockedAchievements, totalReward);

    }
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
   * @param {Array} achievements - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
   * @param {number} totalReward - –æ–±—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞
   */
  showAchievementNotification(achievements, totalReward) {
    const notification = document.createElement('div');
    notification.className = 'achievement-notification';
    notification.innerHTML = `
      <div class="achievement-header">üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!</div>
      <div class="achievement-list">
        ${achievements.map(ach => `<div>${ach.name}: +${ach.reward} –º–æ–Ω–µ—Ç</div>`).join('')}
      </div>
      <div class="achievement-total">–û–±—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞: +${totalReward} –º–æ–Ω–µ—Ç</div>
    `;

    document.body.appendChild(notification);

    // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 5000);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
   * @returns {Object|null} —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
   */
  getCurrentProfile() {
    return this.currentProfile;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç
   * @returns {number} –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç
   */
  getCoinBalance() {
    return this.currentProfile ? this.currentProfile.coins.balance : 0;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
   * @returns {Object} –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
   */
  getDebugInfo() {
    return {
      profileManager: this.profileManager.getDebugInfo(),
      telegramUser: this.telegramUser.getDebugInfo(),
      currentProfile: this.currentProfile ? {
        username: this.currentProfile.profile.username,
        coins: this.currentProfile.coins.balance,
        gamesPlayed: this.currentProfile.profile.totalGamesPlayed
      } : null
    };
  }
}


