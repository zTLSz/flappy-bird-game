export class UI {
  constructor() {
    this.startScreen = this._getOrCreateStartScreen();
    this.gameOverScreen = this._getOrCreateGameOverScreen();
    this.scoreDisplay = this._getOrCreateScoreDisplay();
    this._bindedStart = null;
    this._bindedRestart = null;
    this._bindedLeaderboard = null;
    this._bindedSkins = null;
    this._bindedSkinSelect = null;
    this._bindedBack = null;
    this._bindedSoundToggle = null;
    this._bindedWithdraw = null;
    this._bindedConfirm = null;
  }

  showStart(onStart, onLeaderboard, onSkins, onSoundToggle, onWithdraw, telegramUser = null, totalEarned = 0) {
    this.hideAll();
    
    
    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.startScreen = this._getOrCreateStartScreen(telegramUser);
    this.startScreen.classList.remove('hidden');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è DOM
    setTimeout(() => {
      this.updateTokenDisplay(totalEarned);
    }, 0);
    
    const startBtn = this.startScreen.querySelector('.start-btn');
    const leaderboardBtn = this.startScreen.querySelector('.leaderboard-btn');
    const skinsBtn = this.startScreen.querySelector('.skins-btn');
    const withdrawBtn = this.startScreen.querySelector('.withdraw-btn');
    const soundBtn = this.startScreen.querySelector('.sound-toggle-btn');
    
    if (this._bindedStart) startBtn.removeEventListener('click', this._bindedStart);
    this._bindedStart = () => {
      onStart && onStart();
    };
    startBtn.addEventListener('click', this._bindedStart);
    
    if (this._bindedLeaderboard) leaderboardBtn.removeEventListener('click', this._bindedLeaderboard);
    this._bindedLeaderboard = () => onLeaderboard && onLeaderboard();
    leaderboardBtn.addEventListener('click', this._bindedLeaderboard);
    
    if (this._bindedSkins) skinsBtn.removeEventListener('click', this._bindedSkins);
    this._bindedSkins = () => onSkins && onSkins();
    skinsBtn.addEventListener('click', this._bindedSkins);
    
    if (this._bindedWithdraw) withdrawBtn.removeEventListener('click', this._bindedWithdraw);
    this._bindedWithdraw = () => onWithdraw && onWithdraw();
    withdrawBtn.addEventListener('click', this._bindedWithdraw);
    
    if (this._bindedSoundToggle) soundBtn.removeEventListener('click', this._bindedSoundToggle);
    this._bindedSoundToggle = () => onSoundToggle && onSoundToggle();
    soundBtn.addEventListener('click', this._bindedSoundToggle);
  }

  showGameOver(score, onRestart, onLeaderboard, onSkins, onSoundToggle, onWithdraw, gameTokensEarned = 0, totalTokensEarned = 0) {
    this.hideAll();
    
    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —ç–∫—Ä–∞–Ω –≥–µ–π–º–æ–≤–µ—Ä–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    this.gameOverScreen = this._getOrCreateGameOverScreen();
    this.gameOverScreen.classList.remove('hidden');
    this.gameOverScreen.querySelector('.final-score').textContent = `–°—á—ë—Ç: ${score}`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    const gameTokensElement = this.gameOverScreen.querySelector('#game-tokens-earned');
    const totalTokensElement = this.gameOverScreen.querySelector('#total-tokens-earned');
    
    if (gameTokensElement) {
      gameTokensElement.textContent = `${gameTokensEarned} ü™ô`;
    }
    if (totalTokensElement) {
      totalTokensElement.textContent = `${totalTokensEarned} ü™ô`;
    }
    
    const restartBtn = this.gameOverScreen.querySelector('.restart-btn');
    const leaderboardBtn = this.gameOverScreen.querySelector('.leaderboard-btn');
    const skinsBtn = this.gameOverScreen.querySelector('.skins-btn');
    const withdrawBtn = this.gameOverScreen.querySelector('.withdraw-btn');
    const soundBtn = this.gameOverScreen.querySelector('.sound-toggle-btn');
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ
    if (this._bindedRestart) restartBtn.removeEventListener('click', this._bindedRestart);
    this._bindedRestart = () => onRestart && onRestart();
    restartBtn.addEventListener('click', this._bindedRestart);
    
    if (this._bindedLeaderboard) leaderboardBtn.removeEventListener('click', this._bindedLeaderboard);
    this._bindedLeaderboard = () => onLeaderboard && onLeaderboard();
    leaderboardBtn.addEventListener('click', this._bindedLeaderboard);
    
    if (this._bindedSkins) skinsBtn.removeEventListener('click', this._bindedSkins);
    this._bindedSkins = () => onSkins && onSkins();
    skinsBtn.addEventListener('click', this._bindedSkins);
    
    if (this._bindedWithdraw) withdrawBtn.removeEventListener('click', this._bindedWithdraw);
    this._bindedWithdraw = () => onWithdraw && onWithdraw();
    withdrawBtn.addEventListener('click', this._bindedWithdraw);
    
    if (this._bindedSoundToggle) soundBtn.removeEventListener('click', this._bindedSoundToggle);
    this._bindedSoundToggle = () => onSoundToggle && onSoundToggle();
    soundBtn.addEventListener('click', this._bindedSoundToggle);
  }

  showLeaderboard(onBack) {
    this.hideAll();
    const leaderboardScreen = this._getOrCreateLeaderboardScreen();
    leaderboardScreen.classList.remove('hidden');
    
    const backBtn = leaderboardScreen.querySelector('button');
    if (this._bindedBack) backBtn.removeEventListener('click', this._bindedBack);
    this._bindedBack = () => onBack && onBack();
    backBtn.addEventListener('click', this._bindedBack);
  }

  showSkins(onBack, onSkinSelect, currentSkin = 'bird') {
    this.hideAll();
    const skinsScreen = this._getOrCreateSkinsScreen();
    skinsScreen.classList.remove('hidden');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∫–∏–Ω
    this._updateSelectedSkin(skinsScreen, currentSkin);
    
    const backBtn = skinsScreen.querySelector('.back-btn');
    if (this._bindedBack) backBtn.removeEventListener('click', this._bindedBack);
    this._bindedBack = () => onBack && onBack();
    backBtn.addEventListener('click', this._bindedBack);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–∫–∏–Ω–æ–≤
    const skinButtons = skinsScreen.querySelectorAll('.skin-item');
    skinButtons.forEach((button, index) => {
      if (this._bindedSkinSelect) button.removeEventListener('click', this._bindedSkinSelect);
      this._bindedSkinSelect = () => {
        if (onSkinSelect) onSkinSelect(index);
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∫–∏–Ω –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
        const selectedSkin = button.getAttribute('data-skin');
        this._updateSelectedSkin(skinsScreen, selectedSkin);
      };
      button.addEventListener('click', this._bindedSkinSelect);
    });
  }

  showWithdrawScreen(onBack, onConfirm, totalTokens = 0) {
    this.hideAll();
    const withdrawScreen = this._getOrCreateWithdrawScreen();
    withdrawScreen.classList.remove('hidden');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö
    const tokensInfo = withdrawScreen.querySelector('#withdraw-tokens-info');
    if (tokensInfo) {
      if (totalTokens > 0) {
        tokensInfo.innerHTML = `
          <div class="token-info">
            <div class="token-label">–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞:</div>
            <div class="token-display">${totalTokens} ü™ô</div>
          </div>
        `;
      } else {
        tokensInfo.innerHTML = `
          <div class="token-info">
            <div class="token-label">–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞:</div>
            <div class="token-display">0 ü™ô</div>
          </div>
          <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞. –ò–≥—Ä–∞–π—Ç–µ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ!</p>
        `;
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤
    const tokensAmountInput = withdrawScreen.querySelector('#tokens-amount');
    if (tokensAmountInput) {
      tokensAmountInput.value = totalTokens > 0 ? Math.min(1, totalTokens) : 1;
      tokensAmountInput.max = totalTokens;
    }
    
    const backBtn = withdrawScreen.querySelector('.back-btn');
    const confirmBtn = withdrawScreen.querySelector('.confirm-withdraw-btn');
    
    if (this._bindedBack) backBtn.removeEventListener('click', this._bindedBack);
    this._bindedBack = () => onBack && onBack();
    backBtn.addEventListener('click', this._bindedBack);
    
    if (this._bindedConfirm) confirmBtn.removeEventListener('click', this._bindedConfirm);
    this._bindedConfirm = () => {
      const walletAddress = withdrawScreen.querySelector('#wallet-address').value.trim();
      const tokensAmount = parseInt(withdrawScreen.querySelector('#tokens-amount').value);
      
      if (!walletAddress) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞');
        return;
      }
      
      if (onConfirm) {
        onConfirm(walletAddress, tokensAmount);
      }
    };
    confirmBtn.addEventListener('click', this._bindedConfirm);
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —ç–∫—Ä–∞–Ω–∞
    const walletInput = withdrawScreen.querySelector('#wallet-address');
    if (walletInput) {
      walletInput.value = '';
    }
  }

  updateLeaderboardList(scores, isOnline = false) {
    const listEl = document.querySelector('.leaderboard-list');
    if (listEl) {
      if (scores.length > 0) {
        listEl.innerHTML = scores.map((entry, index) => {
          const playerName = entry.playerName || 'Unknown';
          return `<div class="score-entry">${index + 1}. ${playerName} - ${entry.score} (${entry.date} ${entry.time})</div>`;
        }).join('');
      } else {
        listEl.innerHTML = '<div class="no-scores">–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∫–æ—Ä–¥–æ–≤</div>';
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const statusEl = document.querySelector('.connection-status');
      if (statusEl) {
        statusEl.textContent = isOnline ? 'üåê –û–Ω–ª–∞–π–Ω' : 'üì± –¢–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ';
        statusEl.className = `connection-status ${isOnline ? 'online' : 'offline'}`;
      }
    }
  }

  showScore(score) {
    this.hideAll();
    this.scoreDisplay.classList.remove('hidden');
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—á–µ—Ç–∞ –∏ —Ç–æ–∫–µ–Ω–æ–≤
    if (!this.scoreDisplay.querySelector('.score-container')) {
      this.scoreDisplay.innerHTML = `
        <div class="score-container">
          <div class="score-text">${score}</div>
          <div class="tokens-earned">+${Math.floor(score / 5)} ü™ô</div>
        </div>
      `;
    } else {
      this.scoreDisplay.querySelector('.score-text').textContent = score;
      this.scoreDisplay.querySelector('.tokens-earned').textContent = `+${Math.floor(score / 5)} ü™ô`;
    }
  }

  updateTokenDisplay(totalEarned) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
    const tokenDisplay = document.getElementById('token-display');
    if (tokenDisplay) {
      tokenDisplay.textContent = `${totalEarned} ü™ô`;
    } else {
      console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç token-display –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ start-screen');
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ start-screen
      const startScreen = document.getElementById('start-screen');
      if (startScreen) {
        const tokenDisplayInStart = startScreen.querySelector('#token-display');
        if (tokenDisplayInStart) {
          tokenDisplayInStart.textContent = `${totalEarned} ü™ô`;
        } else {
          console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç token-display –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–∞–∂–µ –≤ start-screen');
        }
      }
    }
  }

  updateSoundButton(isSoundOn) {
    const soundButtons = document.querySelectorAll('.sound-toggle-btn');
    soundButtons.forEach(button => {
      if (isSoundOn) {
        button.innerHTML = 'üîä';
        button.classList.remove('sound-off');
        button.classList.add('sound-on');
      } else {
        button.innerHTML = 'üîá';
        button.classList.remove('sound-on');
        button.classList.add('sound-off');
      }
    });
  }

  hideAll() {
    this.startScreen.classList.add('hidden');
    this.gameOverScreen.classList.add('hidden');
    this.scoreDisplay.classList.add('hidden');
    const leaderboardScreen = document.getElementById('leaderboard-screen');
    if (leaderboardScreen) leaderboardScreen.classList.add('hidden');
    const skinsScreen = document.getElementById('skins-screen');
    if (skinsScreen) skinsScreen.classList.add('hidden');
    const withdrawScreen = document.getElementById('withdraw-screen');
    if (withdrawScreen) withdrawScreen.classList.add('hidden');
  }

  _getOrCreateStartScreen(telegramUser = null) {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    let oldEl = document.getElementById('start-screen');
    if (oldEl) {
      oldEl.remove();
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
    const el = document.createElement('div');
    el.id = 'start-screen';
    el.className = 'ui-screen';
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
    let userName = null;
    if (telegramUser && telegramUser.isInTelegram()) {
      userName = telegramUser.getUserName();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–∫—Ä–∞–Ω–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    el.innerHTML = `
      <h1>Flappy Bird</h1>
      ${userName ? `<div class="telegram-user">–ü—Ä–∏–≤–µ—Ç, ${userName}! üëã</div>` : ''}
      <div class="token-info">
        <div class="token-label">–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤:</div>
        <div id="token-display" class="token-display">0 ü™ô</div>
      </div>
      <button class="start-btn">–ù–∞—á–∞—Ç—å –∏–≥—Ä—É</button>
      <button class="leaderboard-btn">–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤</button>
      <button class="skins-btn">–í—ã–±–æ—Ä –æ–±–ª–∏–∫–∞</button>
      <button class="withdraw-btn">–í—ã–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω—ã (–¢–ï–°–¢)</button>
      <button class="sound-toggle-btn sound-on">üîä</button>
    `;
    
    document.getElementById('game-container').appendChild(el);
    return el;
  }

  _getOrCreateGameOverScreen() {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —ç–∫—Ä–∞–Ω –≥–µ–π–º–æ–≤–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    let oldEl = document.getElementById('gameover-screen');
    if (oldEl) {
      oldEl.remove();
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫—Ä–∞–Ω –≥–µ–π–º–æ–≤–µ—Ä–∞
    const el = document.createElement('div');
    el.id = 'gameover-screen';
    el.className = 'ui-screen hidden';
    el.innerHTML = `
      <h2>–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞</h2>
      <div class="final-score"></div>
      <div class="game-stats">
        <div class="token-info">
          <div class="token-label">–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ:</div>
          <div id="game-tokens-earned" class="token-display">0 ü™ô</div>
        </div>
        <div class="token-info">
          <div class="token-label">–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</div>
          <div id="total-tokens-earned" class="token-display">0 ü™ô</div>
        </div>
      </div>
      <button class="restart-btn">–°—ã–≥—Ä–∞—Ç—å –µ—â—ë</button>
      <button class="leaderboard-btn">–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤</button>
      <button class="skins-btn">–í—ã–±–æ—Ä –æ–±–ª–∏–∫–∞</button>
      <button class="withdraw-btn">–í—ã–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω—ã (–¢–ï–°–¢)</button>
      <button class="sound-toggle-btn sound-on">üîä</button>
    `;
    document.getElementById('game-container').appendChild(el);
    return el;
  }

  _getOrCreateLeaderboardScreen() {
    let el = document.getElementById('leaderboard-screen');
    if (!el) {
      el = document.createElement('div');
      el.id = 'leaderboard-screen';
      el.className = 'ui-screen hidden';
      el.innerHTML = `
        <h2>–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤</h2>
        <div class="connection-status offline">üì± –¢–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ</div>
        <div class="leaderboard-list"></div>
        <button>–ù–∞–∑–∞–¥</button>
      `;
      document.getElementById('game-container').appendChild(el);
    }
    return el;
  }

  _getOrCreateSkinsScreen() {
    let el = document.getElementById('skins-screen');
    if (!el) {
      el = document.createElement('div');
      el.id = 'skins-screen';
      el.className = 'ui-screen hidden';
      el.innerHTML = `
        <h2>–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∏–∫ –ø—Ç–∏—á–∫–∏</h2>
        <div class="skins-grid">
          <div class="skin-item" data-skin="bird">
            <img src="src/assets/bird.svg" alt="–ñ—ë–ª—Ç–∞—è –ø—Ç–∏—á–∫–∞" width="70" height="50">
          </div>
          <div class="skin-item" data-skin="bird-red">
            <img src="src/assets/bird-red.svg" alt="–ö—Ä–∞—Å–Ω–∞—è –ø—Ç–∏—á–∫–∞" width="70" height="50">
          </div>
          <div class="skin-item" data-skin="bird-green">
            <img src="src/assets/bird-green.svg" alt="–ó–µ–ª—ë–Ω–∞—è –ø—Ç–∏—á–∫–∞" width="70" height="50">
          </div>
        </div>
        <button class="back-btn">–ù–∞–∑–∞–¥</button>
      `;
      document.getElementById('game-container').appendChild(el);
    }
    return el;
  }

  _getOrCreateWithdrawScreen() {
    let el = document.getElementById('withdraw-screen');
    if (!el) {
      el = document.createElement('div');
      el.id = 'withdraw-screen';
      el.className = 'ui-screen hidden';
      el.innerHTML = `
        <h2>–í—ã–≤–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤</h2>
        <div class="withdraw-content">
          <div id="withdraw-tokens-info">
            <p>–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ñ–æ—Ä–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–æ–≤</p>
          </div>
          <div class="withdraw-form">
            <div class="form-group">
              <label for="wallet-address">–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:</label>
              <input type="text" id="wallet-address" placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å Solana –∫–æ—à–µ–ª—å–∫–∞" class="form-input">
            </div>
            <div class="form-group">
              <label for="tokens-amount">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤:</label>
              <input type="number" id="tokens-amount" value="1" min="1" class="form-input" disabled>
            </div>
            <button class="confirm-withdraw-btn">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–≤–æ–¥</button>
          </div>
        </div>
        <button class="back-btn">–ù–∞–∑–∞–¥</button>
      `;
      document.getElementById('game-container').appendChild(el);
    }
    return el;
  }

  _getOrCreateScoreDisplay() {
    let el = document.getElementById('score-display');
    if (!el) {
      el = document.createElement('div');
      el.id = 'score-display';
      el.className = 'hidden';
      el.style.position = 'absolute';
      el.style.top = '20px';
      el.style.right = '20px';
      el.style.fontSize = '2rem';
      el.style.fontWeight = 'bold';
      el.style.color = 'white';
      el.style.textShadow = '2px 2px 4px rgba(0,0,0,0.7)';
      document.getElementById('game-container').appendChild(el);
    }
    return el;
  }

  _updateSelectedSkin(skinsScreen, selectedSkin) {
    // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö —Å–∫–∏–Ω–æ–≤
    const allSkinItems = skinsScreen.querySelectorAll('.skin-item');
    allSkinItems.forEach(item => {
      item.classList.remove('selected');
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–∫–∏–Ω—É
    const selectedItem = skinsScreen.querySelector(`[data-skin="${selectedSkin}"]`);
    if (selectedItem) {
      selectedItem.classList.add('selected');
    }
  }
} 